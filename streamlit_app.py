import streamlit as st
import pandas as pd
import numpy as np
import time
import matplotlib.pyplot as plt

chart_data = pd.DataFrame(
        np.random.randn(20, 3),
        columns=['a', 'b', 'c']
    )


# =======================================================================
# CONFIGURA√á√ÉO DA P√ÅGINA
# st.set_page_config() deve ser o primeiro comando Streamlit no script.
# =======================================================================
st.set_page_config(
    page_title="T√©cnicas de Medi√ß√£o",
    page_icon=":zap:",
    layout="wide",
    initial_sidebar_state="expanded"
)

# =======================================================================
# BARRA LATERAL (SIDEBAR) PARA NAVEGA√á√ÉO
# =======================================================================
with st.sidebar:
    st.image("Logo_v2.png", width=100)
    
    escolha_pagina = st.radio(
        "Escolha uma op√ß√£o:",
        [
            "P√°gina Inicial",
            "GERAL",
            "FASE A",
            "FASE B",
            "FASE C",
            "Outro"
        ]
    )
    st.markdown("---")

# =======================================================================
# CONTE√öDO DAS P√ÅGINAS
# =======================================================================

# -----------------------------------------------------------------------
# P√ÅGINA INICIAL
# -----------------------------------------------------------------------
if escolha_pagina == "P√°gina Inicial":
    st.title(":zap: Supervis√≥rio de T√©cnicas de Medi√ß√£o")
    st.markdown("""
    As despesas com energia el√©trica nas atividades comerciais e industriais se apresentam como um dos maiores insumos
para o setor produtivo. Em diversos empreendimentos, n√£o h√° um sistema que indique qual o consumo di√°rio e quais
atividades consomem mais energia el√©trica, ficando as empresas limitadas √†s an√°lises das contas de energia el√©trica.
                

A instala√ß√£o de um Sistema de Monitoramento em tempo real pode auxiliar as empresas nos rastreios dos custos de
energia el√©trica total ou parcial dos seus processos, auxiliando os empres√°rios no c√°lculo do custo de energia el√©trica
agregado a cada produto ou processo.
                

Um Sistema de Monitoramento de Energia El√©trica com supervis√≥rio funciona por meio da coleta e monitora√ß√£o de
dados de consumo de energia el√©trica em tempo real, com an√°lise, processamento dos dados e apresenta√ß√£o dos
resultados num√©rica e graficamente, na forma de grandezas energ√©ticas que caracterizam o uso da energia el√©trica
das instala√ß√µes.
                

Dentre as grandezas b√°sicas monitoradas por um sistema deste tipo s√£o:
- Demandas Ativa, Reativa e Aparente, armazenando os valores m√°ximos ocorridos;
- Energias Ativa, Reativa e Aparente;
- Fator de Pot√™ncia, armazenando sua natureza capacitiva ou indutiva bem como valores m√≠nimos ocorridos;
- Tens√µes de linha e de fase; e
- Correntes
            
    """)


# -----------------------------------------------------------------------
# GERAL
# -----------------------------------------------------------------------
elif escolha_pagina == "GERAL":
    st.header("üñ•Ô∏è Geral")

    col1, col2, col3 = st.columns([1, 1, 1])
    with col1:
        st.subheader("POT√äNCIA ATIVA")
        st.line_chart(chart_data)
        st.divider()

    with col2:
        st.subheader("POT√äNCIA REATIVA")
        st.line_chart(chart_data)
        st.divider()

    with col3:
        st.subheader("POT√äNCIA APARENTE")
        st.line_chart(chart_data)
        st.divider()

    st.subheader("`st.area_chart`")
    st.markdown("Semelhante ao gr√°fico de linhas, mas preenche a √°rea abaixo, √∫til para mostrar volumes cumulativos.")
    st.area_chart(chart_data)
    st.code("st.area_chart(dados)")
    st.divider()
    
    st.subheader("`st.bar_chart`")
    st.markdown("Excelente para comparar valores entre diferentes categorias.")
    st.bar_chart(chart_data)
    st.code("st.bar_chart(dados)")
    st.divider()

    st.subheader("`st.pyplot` (com Matplotlib) - CORRIGIDO")
    st.markdown("Use para total customiza√ß√£o. Agora mostrando um gr√°fico de dispers√£o para comparar as colunas 'a' e 'b', com a cor baseada na coluna 'c'.")
    
    # Criando a figura e os eixos com Matplotlib
    fig, ax = plt.subplots(figsize=(8, 5))
    
    # Criando o gr√°fico de dispers√£o (scatter plot)
    scatter = ax.scatter(
        chart_data['a'], 
        chart_data['b'], 
        c=chart_data['c'], # Usa a coluna 'c' para definir a cor dos pontos
        cmap='viridis'     # Define um mapa de cores
    )
    
    # Adicionando r√≥tulos, t√≠tulo e uma barra de cores
    ax.set_xlabel("Eixo A")
    ax.set_ylabel("Eixo B")
    ax.set_title("Gr√°fico de Dispers√£o Customizado com Matplotlib")
    ax.grid(True)
    fig.colorbar(scatter, ax=ax, label="Valor de C")
    
    # Exibindo o gr√°fico no Streamlit
    st.pyplot(fig)
    
    st.code("""
import matplotlib.pyplot as plt

# Criando a figura e os eixos
fig, ax = plt.subplots()

# Criando o gr√°fico de dispers√£o
scatter = ax.scatter(
    dados['a'], 
    dados['b'], 
    c=dados['c'], # Cor baseada na coluna 'c'
    cmap='viridis'
)

# Adicionando customiza√ß√µes
ax.set_xlabel("Eixo A")
ax.set_ylabel("Eixo B")
ax.set_title("Gr√°fico de Dispers√£o Customizado")
ax.grid(True)
fig.colorbar(scatter, ax=ax, label="Valor de C")

# Exibindo no Streamlit
st.pyplot(fig)
    """)
    st.divider()
    
    st.subheader("`st.plotly_chart`")
    st.markdown("√ìtimo para gr√°ficos interativos (zoom, pan, tooltips) com poucas linhas de c√≥digo.")
    try:
        import plotly.express as px
        fig_plotly = px.scatter(
            chart_data, 
            x='a', 
            y='b', 
            color='c', 
            title="Gr√°fico de Dispers√£o Interativo com Plotly"
        )
        st.plotly_chart(fig_plotly, use_container_width=True)
    except ImportError:
        st.warning("A biblioteca Plotly n√£o est√° instalada. Execute: pip install plotly")
    st.code("""
import plotly.express as px
fig = px.scatter(dados, x='a', y='b', color='c')
st.plotly_chart(fig, use_container_width=True)
    """)


# -----------------------------------------------------------------------
# ELEMENTOS DE TEXTO
# -----------------------------------------------------------------------
elif escolha_pagina == "Elementos de Texto":
    st.header("üî° Elementos de Texto")
    st.markdown("Use estes comandos para exibir texto de forma estruturada.")

    st.subheader("`st.title` e `st.header`")
    st.title("Este √© um t√≠tulo (st.title)")
    st.header("Este √© um cabe√ßalho (st.header)")
    st.subheader("Este √© um subcabe√ßalho (st.subheader)")
    st.code("""
st.title("Este √© um t√≠tulo")
st.header("Este √© um cabe√ßalho")
st.subheader("Este √© um subcabe√ßalho")
    """)
    st.divider()

    st.subheader("`st.markdown`, `st.text` e `st.write`")
    st.markdown("O **Markdown** permite formata√ß√£o: *it√°lico*, `c√≥digo`, [links](https://streamlit.io), etc.")
    st.text("st.text exibe texto em fonte monoespa√ßada, sem formata√ß√£o.")
    st.write("st.write √© um comando 'm√°gico' que renderiza quase tudo!")
    st.write({"chave": "valor", "lista": [1, 2, 3]})
    st.code("""
st.markdown("O **Markdown** permite formata√ß√£o.")
st.text("st.text exibe texto em fonte monoespa√ßada.")
st.write("st.write renderiza quase tudo!")
    """)
    st.divider()

    st.subheader("`st.code` e `st.latex`")
    st.code("import streamlit as st\nst.write('Ol√°, Mundo!')", language="python")
    st.latex(r'''
        a + ar + a r^2 + a r^3 + \cdots + a r^{n-1} =
        \sum_{k=0}^{n-1} ar^k =
        a \left(\frac{1-r^{n}}{1-r}\right)
    ''')
    st.code(r"""
st.code('st.write("Ol√°, Mundo!")', language='python')
st.latex(r'a + ar + a r^2 = \sum_{k=0}^{2} ar^k')
    """)

# -----------------------------------------------------------------------
# EXIBI√á√ÉO DE DADOS
# -----------------------------------------------------------------------
elif escolha_pagina == "Exibi√ß√£o de Dados":
    st.header("üìä Exibi√ß√£o de Dados")

    st.subheader("`st.dataframe`")
    st.markdown("Exibe um DataFrame interativo (orden√°vel, redimension√°vel).")
    st.dataframe(chart_data)
    st.code("st.dataframe(meu_dataframe)")
    st.divider()

    st.subheader("`st.table`")
    st.markdown("Exibe uma tabela est√°tica.")
    st.table(chart_data.head())
    st.code("st.table(meu_dataframe.head())")
    st.divider()

    st.subheader("`st.metric`")
    st.markdown("Exibe uma m√©trica em destaque, ideal para dashboards.")
    col1, col2, col3 = st.columns(3)
    col1.metric("Temperatura", "25 ¬∞C", "1.2 ¬∞C")
    col2.metric("Umidade", "76%", "-8%")
    col3.metric("Vendas (M√™s)", "R$ 150.3k", "12%", delta_color="inverse")
    st.code("""
col1, col2, col3 = st.columns(3)
col1.metric("Temperatura", "25 ¬∞C", "1.2 ¬∞C")
col2.metric("Umidade", "76%", "-8%")
col3.metric("Vendas (M√™s)", "R$ 150.3k", "12%", delta_color="inverse")
    """)
    st.divider()

    st.subheader("`st.json`")
    st.markdown("Exibe um objeto JSON.")
    st.json({'nome': 'Streamlit', 'versao': '1.30.0', 'ativo': True})
    st.code("st.json({'nome': 'Streamlit', 'ativo': True})")


# -----------------------------------------------------------------------
# GR√ÅFICOS
# -----------------------------------------------------------------------
elif escolha_pagina == "Gr√°ficos":
    st.header("üìà Gr√°ficos")
    st.info("Todos os gr√°ficos abaixo s√£o gerados a partir do mesmo conjunto de dados aleat√≥rios para facilitar a compara√ß√£o.")

    st.subheader("`st.line_chart`")
    st.markdown("Ideal para visualizar dados ao longo do tempo ou de uma sequ√™ncia cont√≠nua.")
    st.line_chart(chart_data)
    st.code("st.line_chart(dados)")
    st.divider()

    st.subheader("`st.area_chart`")
    st.markdown("Semelhante ao gr√°fico de linhas, mas preenche a √°rea abaixo, √∫til para mostrar volumes cumulativos.")
    st.area_chart(chart_data)
    st.code("st.area_chart(dados)")
    st.divider()
    
    st.subheader("`st.bar_chart`")
    st.markdown("Excelente para comparar valores entre diferentes categorias.")
    st.bar_chart(chart_data)
    st.code("st.bar_chart(dados)")
    st.divider()

    st.subheader("`st.pyplot` (com Matplotlib) - CORRIGIDO")
    st.markdown("Use para total customiza√ß√£o. Agora mostrando um gr√°fico de dispers√£o para comparar as colunas 'a' e 'b', com a cor baseada na coluna 'c'.")
    
    # Criando a figura e os eixos com Matplotlib
    fig, ax = plt.subplots(figsize=(8, 5))
    
    # Criando o gr√°fico de dispers√£o (scatter plot)
    scatter = ax.scatter(
        chart_data['a'], 
        chart_data['b'], 
        c=chart_data['c'], # Usa a coluna 'c' para definir a cor dos pontos
        cmap='viridis'     # Define um mapa de cores
    )
    
    # Adicionando r√≥tulos, t√≠tulo e uma barra de cores
    ax.set_xlabel("Eixo A")
    ax.set_ylabel("Eixo B")
    ax.set_title("Gr√°fico de Dispers√£o Customizado com Matplotlib")
    ax.grid(True)
    fig.colorbar(scatter, ax=ax, label="Valor de C")
    
    # Exibindo o gr√°fico no Streamlit
    st.pyplot(fig)
    
    st.code("""
import matplotlib.pyplot as plt

# Criando a figura e os eixos
fig, ax = plt.subplots()

# Criando o gr√°fico de dispers√£o
scatter = ax.scatter(
    dados['a'], 
    dados['b'], 
    c=dados['c'], # Cor baseada na coluna 'c'
    cmap='viridis'
)

# Adicionando customiza√ß√µes
ax.set_xlabel("Eixo A")
ax.set_ylabel("Eixo B")
ax.set_title("Gr√°fico de Dispers√£o Customizado")
ax.grid(True)
fig.colorbar(scatter, ax=ax, label="Valor de C")

# Exibindo no Streamlit
st.pyplot(fig)
    """)
    st.divider()
    
    st.subheader("`st.plotly_chart`")
    st.markdown("√ìtimo para gr√°ficos interativos (zoom, pan, tooltips) com poucas linhas de c√≥digo.")
    try:
        import plotly.express as px
        fig_plotly = px.scatter(
            chart_data, 
            x='a', 
            y='b', 
            color='c', 
            title="Gr√°fico de Dispers√£o Interativo com Plotly"
        )
        st.plotly_chart(fig_plotly, use_container_width=True)
    except ImportError:
        st.warning("A biblioteca Plotly n√£o est√° instalada. Execute: pip install plotly")
    st.code("""
import plotly.express as px
fig = px.scatter(dados, x='a', y='b', color='c')
st.plotly_chart(fig, use_container_width=True)
    """)


# -----------------------------------------------------------------------
# WIDGETS INTERATIVOS
# -----------------------------------------------------------------------
elif escolha_pagina == "Widgets Interativos (Inputs)":
    st.header("üëÜ Widgets Interativos (Inputs)")

    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Sele√ß√£o")
        st.checkbox("Marque-me")
        st.radio("Escolha uma op√ß√£o", ["A", "B", "C"])
        st.selectbox("Selecione um item", ["Ma√ß√£", "Laranja", "Banana"])
        st.multiselect("Selecione m√∫ltiplos itens", ["Python", "Streamlit", "Pandas"], default=["Streamlit"])

    with col2:
        st.subheader("Entrada de Dados")
        st.text_input("Seu nome", placeholder="Digite aqui...")
        st.number_input("Sua idade", min_value=0, max_value=120, value=25)
        st.date_input("Data de nascimento")
        st.color_picker("Escolha uma cor", "#00f900")
    
    st.divider()
    
    st.subheader("Sliders e Bot√µes")
    st.slider("N√≠vel de satisfa√ß√£o", 1, 10, 8)
    st.select_slider("Selecione uma faixa", options=['Baixo', 'M√©dio', 'Alto'])
    
    if st.button("Clique em mim"):
        st.success("Bot√£o clicado!")
        
    st.download_button(
        label="Baixar dados de exemplo",
        data=chart_data.to_csv(index=False).encode('utf-8'),
        file_name='dados_exemplo.csv',
        mime='text/csv',
    )
    
    st.divider()

    st.subheader("Inputs de Arquivo")
    st.file_uploader("Envie um arquivo")

    st.divider()

    st.subheader("`st.form`")
    st.markdown("Agrupe widgets em um formul√°rio para submeter todos de uma vez.")
    with st.form("meu_formulario"):
        nome = st.text_input("Nome")
        email = st.text_input("Email")
        marcado = st.checkbox("Aceito os termos")
        
        # O bot√£o de submiss√£o do formul√°rio
        submitted = st.form_submit_button("Enviar")
        if submitted:
            st.write("Formul√°rio enviado:", "Nome:", nome, "Email:", email, "Aceito:", marcado)

# -----------------------------------------------------------------------
# LAYOUT E CONT√äINERES
# -----------------------------------------------------------------------
elif escolha_pagina == "Layout e Cont√™ineres":
    st.header("üèóÔ∏è Layout e Cont√™ineres")

    st.subheader("`st.columns`")
    st.markdown("Cria colunas para organizar o conte√∫do lado a lado.")
    col1, col2, col3 = st.columns([2, 1, 1]) # Propor√ß√µes 2:1:1
    with col1:
        st.info("Esta √© a coluna 1 (mais larga).")
    with col2:
        st.info("Coluna 2.")
    with col3:
        st.info("Coluna 3.")
    st.code("""
col1, col2, col3 = st.columns([2, 1, 1])
with col1:
    st.info("Coluna larga.")
    """)
    st.divider()

    st.subheader("`st.tabs`")
    st.markdown("Cria abas para separar conte√∫dos.")
    tab1, tab2 = st.tabs(["Gr√°fico", "Tabela"])
    with tab1:
        st.line_chart(chart_data)
    with tab2:
        st.dataframe(chart_data)
    st.code("""
tab1, tab2 = st.tabs(["Aba 1", "Aba 2"])
with tab1:
    st.write("Conte√∫do da Aba 1")
    """)
    st.divider()

    st.subheader("`st.expander`")
    st.markdown("Oculta conte√∫do em uma se√ß√£o expans√≠vel.")
    with st.expander("Clique para ver mais detalhes"):
        st.write("Este conte√∫do estava oculto! √â √≥timo para informa√ß√µes adicionais.")
        st.image("https://static.streamlit.io/examples/cat.jpg")
    st.code("""
with st.expander("Clique para ver"):
    st.write("Conte√∫do oculto...")
    """)
    st.divider()

    st.subheader("`st.container` e `st.empty`")
    st.markdown("`st.container` cria um bloco para agrupar elementos. `st.empty` cria um espa√ßo reservado que pode ser preenchido ou alterado depois.")
    with st.container():
        st.write("Este √© um cont√™iner.")
        st.bar_chart(np.random.randn(50, 3))

    placeholder = st.empty()
    if st.button("Preencher o espa√ßo vazio"):
        placeholder.success("O espa√ßo vazio foi preenchido com esta mensagem!")
    st.code("""
placeholder = st.empty()
if st.button("Preencher"):
    placeholder.success("Pronto!")
    """)

# -----------------------------------------------------------------------
# M√çDIA
# -----------------------------------------------------------------------
elif escolha_pagina == "M√≠dia":
    st.header("üñºÔ∏è M√≠dia")

    st.subheader("`st.image`")
    st.image("https://storage.googleapis.com/streamlit-public-media/gallery/cat.jpg",
             caption="Um gato fofo. Imagem de exemplo do Streamlit.", width=300)
    st.code("st.image(url, caption='Legenda', width=300)")
    st.divider()

    st.subheader("`st.audio`")
    st.audio("https://storage.googleapis.com/streamlit-public-media/gallery/B_T_V_2020-09-08.mp3")
    st.code("st.audio(url_do_audio)")
    st.divider()
    
    st.subheader("`st.video`")
    st.video("https://storage.googleapis.com/streamlit-public-media/gallery/cat-rolling.mp4")
    st.code("st.video(url_do_video)")
    
# -----------------------------------------------------------------------
# STATUS E PROGRESSO
# -----------------------------------------------------------------------
elif escolha_pagina == "Status e Progresso":
    st.header("‚è≥ Status e Progresso")

    st.subheader("Barras de Progresso e Spinners")
    if st.button("Iniciar processo demorado"):
        st.toast("Come√ßando!")
        progress_bar = st.progress(0, text="Aguarde...")
        for i in range(100):
            time.sleep(0.01)
            progress_bar.progress(i + 1, text=f"Processando item {i+1}...")
        progress_bar.empty()
        st.success("Processo conclu√≠do!")

    with st.spinner('Esperando por algo...'):
        time.sleep(2)
    st.write("Algo aconteceu!")
    
    with st.status("Detalhes do processo...", expanded=True) as status:
        st.write("Procurando por arquivos...")
        time.sleep(1)
        st.write("Encontrado 10 arquivos.")
        time.sleep(1)
        st.write("Processo finalizado.")
        status.update(label="Download completo!", state="complete")

    st.subheader("Mensagens de Alerta")
    st.success("Esta √© uma mensagem de sucesso.")
    st.info("Esta √© uma mensagem informativa.")
    st.warning("Esta √© uma mensagem de aviso.")
    st.error("Esta √© uma mensagem de erro.")
    
    try:
        x = 1 / 0
    except Exception as e:
        st.exception(e)
        
    st.subheader("Anima√ß√µes divertidas")
    col1, col2 = st.columns(2)
    if col1.button("Mostrar bal√µes üéà"):
        st.balloons()
    if col2.button("Mostrar neve ‚ùÑÔ∏è"):
        st.snow()

# -----------------------------------------------------------------------
# OTIMIZA√á√ÉO E ESTADO
# -----------------------------------------------------------------------
elif escolha_pagina == "Otimiza√ß√£o e Estado":
    st.header("‚ö° Otimiza√ß√£o e Gerenciamento de Estado")

    st.subheader("`st.cache_data` e `st.cache_resource`")
    st.markdown("""
    - `st.cache_data`: Usado para armazenar em cache resultados de fun√ß√µes que retornam dados (DataFrames, JSON, etc.). O Streamlit verifica os par√¢metros da fun√ß√£o e o conte√∫do do corpo da fun√ß√£o para decidir se re-executa.
    - `st.cache_resource`: Usado para armazenar em cache recursos globais que n√£o devem ser recriados a cada execu√ß√£o (conex√µes com banco de dados, modelos de ML).
    """)
    st.code("""
@st.cache_data
def carregar_dataframe(url):
    # C√≥digo para carregar dados
    return df

@st.cache_resource
def carregar_modelo_ml():
    # C√≥digo para carregar um modelo pesado
    return modelo
    """)
    st.info("J√° estamos usando `@st.cache_data` na fun√ß√£o `carregar_dados()` no topo deste script!")

    st.divider()

    st.subheader("`st.session_state`")
    st.markdown("Um objeto tipo dicion√°rio para armazenar o estado da sess√£o entre as intera√ß√µes do usu√°rio.")

    # Inicializa o contador no estado da sess√£o se ele n√£o existir
    if 'contador' not in st.session_state:
        st.session_state.contador = 0

    st.write("Valor atual do contador:", st.session_state.contador)
    
    col1, col2 = st.columns(2)
    if col1.button("Incrementar +1"):
        st.session_state.contador += 1
        st.rerun() # Opcional, for√ßa o rerrodar imediato

    if col2.button("Resetar contador"):
        st.session_state.contador = 0
        st.rerun()
    
    st.code("""
if 'contador' not in st.session_state:
    st.session_state.contador = 0

if st.button("Incrementar"):
    st.session_state.contador += 1
    """)